#!/usr/bin/env python3

import logging
import http.server
import json
import os
import shutil

from jwt import PyJWKClient, ExpiredSignatureError, DecodeError, decode
from logging import info, error

PORT = 3000
JWKS_URL = "https://token.actions.githubusercontent.com/.well-known/jwks"
ALLOW_ANONYMOUS = os.getenv('ALLOW_ANONYMOUS') == '1'

jwks_client = PyJWKClient(JWKS_URL)


class SigningRequestHandler(http.server.BaseHTTPRequestHandler):
    def do_POST(self):
        import tempfile
        import subprocess
        try:
            if not ALLOW_ANONYMOUS:
                auth = self.headers.get('Authorization')
                if not auth or not auth.startswith('Bearer '):
                    return self._send(401, {'error': 'Authorization header missing or malformed'})

                ctype = self.headers.get('Content-Type')
                if not ctype or ctype != 'application/vnd.microsoft.portable-executable':
                    return self._send(415, {'error': 'Only PE files are supported'})

                token = auth.split(' ')[1]
                auth_key = jwks_client.get_signing_key_from_jwt(token).key
                claims = decode(
                    token, auth_key, algorithms=["RS256"],
                    issuer="https://token.actions.githubusercontent.com",
                    audience="irithyll.me3.help",
                    options={'require': ['actor']}
                )

                info(repr(claims))

                if (
                    claims.get('actor') != 'garyttierney' or
                    claims.get('repository') != 'garyttierney/me3'
                ):
                    return self._send(401, {'error': 'User not authorized'})

            if (key := self.headers.get('X-Signing-Key')) is None:
                return self._send(400, {'error': 'X-Signing-Key header missing'})

            if (pin := self.headers.get('X-Signing-Pin')) is None:
                return self._send(400, {'error': 'X-Signing-Pin header missing'})

            content_length = int(self.headers.get('Content-Length', 0))
            if content_length == 0:
                return self._send(400, {'error': 'Empty request body'})
            pe_data = self.rfile.read(content_length)

            import tempfile
            import glob
            with tempfile.NamedTemporaryFile(delete=False) as infile:
                infile.write(pe_data)
                infile.flush()
                outpath = os.path.join(tempfile.mkdtemp(), 'signed.exe')

                pkcs11_candidates = glob.glob(
                    '/opt/proCertumCardManager/sc30pkcs11-*.so')
                if not pkcs11_candidates:
                    return self._send(500, {'error': 'No PKCS11 module found'})
                pkcs11_path = pkcs11_candidates[0]

                osslsigncode_cmd = [
                    'osslsigncode', 'sign',
                    '-verbose',
                    '-pkcs11module', pkcs11_path,
                    '-certs', '/app/certificate.pem',
                    '-key', key,
                    '-pass', pin,
                    '-h', 'sha256',
                    '-t', 'http://time.certum.pl/',
                    '-in', infile.name,
                    '-out', outpath
                ]

                proc = subprocess.run(osslsigncode_cmd, capture_output=True)
                print(proc.stdout)
                if proc.returncode != 0:
                    return self._send(500, {'error': 'Signing failed', 'details': proc.stderr.decode(errors='replace')})

            self.send_response(200)
            self.send_header(
                'Content-Type', 'application/vnd.microsoft.portable-executable')
            self.send_header('Content-Disposition',
                             'attachment; filename="signed.exe"')
            self.end_headers()

            with open(outpath, 'rb') as outfile:
                shutil.copyfileobj(outfile, self.wfile)

        except ExpiredSignatureError:
            self._send(401, {'error': 'Token has expired'})
        except DecodeError as e:
            self._send(401, {'error': f'Invalid claims: {e}'})
        except Exception as e:
            error(str(e))
            self._send(500, {'error': 'Internal server error'})

    def _send(self, code, body):
        error(repr(body))
        self.send_response(code)
        self.send_header('Content-type', 'application/json')
        self.end_headers()
        self.wfile.write(json.dumps(body).encode())


def main():
    logging.basicConfig(format='%(levelname)s: %(message)s',
                        level=logging.DEBUG)

    with http.server.HTTPServer(('', PORT), SigningRequestHandler) as httpd:
        print(f"Serving at port {PORT}")
        try:
            httpd.serve_forever()
        except KeyboardInterrupt:
            logging.info("^C, shutting down")
            httpd.shutdown()


if __name__ == "__main__":
    main()
